[build-system]
requires = ["setuptools>=45", "setuptools-scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"


[project]
name = "mypythonlibrary"
description = "description"
classifiers = [
    "Programming Language :: Python :: 3",
]
license = {text = "MIT License"}
requires-python = ">=3.7, <4"
dependencies = [
    # "requests",
    "importlib-metadata",
    "numpy",
    "click",
]
dynamic = ["version", "readme"]

[project.optional-dependencies]
tests = [
    'coverage>=5.0.3',
    'pytest',
    'pytest-cov[toml]',
]
# rest = ["docutils>=0.3", "pack ==1.1, ==1.3"]

[project.scripts]
mypythonlibrary = "mypythonlibrary.entrypoint:cli"

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
]
pythonpath = "mypythonlibrary"

[tool.setuptools.dynamic]
# version = {attr = "pkg.VERSION"}
readme = {file = ["README.rst"]}

[tool.setuptools.packages.find]
# where = ["src"] 
exclude = [
    "examples*",
    "tools*",
    "docs*",
    "test*",
]


[tool.coverage.run]
branch = true
parallel = true
source = ["mypythonlibrary"]
omit = ["*/__init__.py"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]


[tool.pyright]
include = ["mypythonlibrary"]


# setuptools_scm extract Python package versions from 
# git or hg metadata instead of declaring them as the 
# version argument or in a SCM managed file.
[tool.setuptools_scm]

